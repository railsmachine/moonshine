PassengerRoot <%= configuration[:passenger][:path] %>
PassengerRuby /usr/bin/ruby

## PassengerLogLevel
#
# Specify how much information Phusion Passenger should write to the
# Apache error log file. A higher log level value means that more
# information will be logged.
#
#  0: Show only errors and warnings. This is the default setting.
#  1: Show the most important debugging information. This might be useful
#     for system administrators who are trying to figure out the cause
#     of a problem.
#  2: Show more debugging information. This is typically
#     only useful for developers.
#  3: Show even more debugging information.

PassengerLogLevel <%= configuration[:passenger][:log_level] || 0 %>

## PassengerUseGlobalQueue
#
# Recall that Phusion Passenger spawns multiple backend processes (e.g. multiple
# Ruby on Rails processes), each which processes HTTP requests serially. One of
# Phusion Passenger's jobs is to forward HTTP requests to a suitable backend
# process. A backend process may take an arbitrary amount of time to process a
# specific HTTP request. If the websites are (temporarily) under high load, and
# the backend processes cannot process the requests fast enough, then some
# requests may have to be queued.
#
# If global queuing is turned off, then Phusion Passenger will use fair load
# balancing. This means that each backend process will have its own private
# queue. Phusion Passenger will forward an HTTP request to the backend process
# that has the least amount of requests in its queue.
#
# If global queuing is turned on, then Phusion Passenger will use a global queue
# that's shared between all backend processes. If an HTTP request comes in, and
# all the backend processes are still busy, then Phusion Passenger will wait
# until at least one backend process is done, and will then forward the request
# to that process.
#
# Options: <on|off>

PassengerUseGlobalQueue <%= passenger_config_boolean(configuration[:passenger][:use_global_queue]) %>

## PassengerUserSwitching
#
# Enable User Switching Support. This option starts your application
# as the owner of the file config/environment.rb. The owner of
# environment.rb must have read access to the Rails application's
# folder, and read/write access to the Rails application's logs folder.
# This feature is only available if Apache is started by root.
#
# Options: <on|off>

PassengerUserSwitching <%= passenger_config_boolean(configuration[:passenger][:user_switching]) %>

## PassengerDefaultUser
#
# Specify the user Passenger must run as. This option allows you
# to specify which user your application will run as if user
# switching fails or is disabled.

PassengerDefaultUser <%= configuration[:passenger][:default_user] || configuration[:user] %>

## PassengerMaxPoolSize
#
# Set the maximum number of application instances that can be
# simultaneously active. A larger number results in higher
# memory usage, but improved ability to handle concurrent HTTP clients.
# The optimal value depends on your system's hardware and the server's
# average load. You should experiment with different values. Generally
# speaking, the value should be at least equal to the number of CPUs
# (or CPU cores) that you have. If your system has 2 GB of RAM, then
# we recommend a value of 30. If your system is a Virtual Private
# Server (VPS) and has about 256 MB RAM, and is also running other
# services such as MySQL, then we recommend a value of 2.

PassengerMaxPoolSize <%= configuration[:passenger][:max_pool_size] || 6 %>

## PassengerMaxInstancesPerApp
#
# Set the maximum number of application instances that may
# be simultaneously active for a single application. This helps to
# make sure that a single application will not occupy all available
# slots in the application pool. This value must be less than
# PassengerMaxPoolSize. A value of 0 means that there is no limit
# placed on the number of instances a single application may use,
# i.e. only the global limit of PassengerMaxPoolSize will be enforced.

PassengerMaxInstancesPerApp <%= configuration[:passenger][:max_instances_per_app] || 0 %>

## PassengerPoolIdleTime
#
# Set the maximum number of seconds that your application instance
# may be idle. That is, if an application instance hasn't done anything
# after the given number of seconds, then it will be shutdown in order
# to conserve memory. Decreasing this value means that applications
# will have to be spawned more often. Since spawning is a relatively
# slow operation, some visitors may notice a small delay when they
# visit your website. However, it will also free up resources used by
# applications more quickly. The optimal value depends on the average
# time that a visitor spends on a single Rails/Rack web page. We
# recommend a value of 2 * x, where x is the average number of seconds
# that a visitor spends on a single web page. But your mileage may vary.

PassengerPoolIdleTime <%= configuration[:passenger][:pool_idle_time] || 300 %>

## PassengerMaxRequests
#
# The maximum number of requests an application instance will process. After
# serving that many requests, the application instance will be shut down and
# Phusion Passenger will restart it. A value of 0 means that there is no
# maximum: an application instance will thus be shut down when its idle timeout
# has been reached.
#
# This option is useful if your application is leaking memory. By shutting it
# down after a certain number of requests, all of its memory is guaranteed to be
# freed by the operating system.
#
# The PassengerMaxRequests directive should be considered as a workaround for
# misbehaving applications. It is advised that you fix the problem in your
# application rather than relying on these directives as a measure to avoid
# memory leaks.

PassengerMaxRequests <%= configuration[:passenger][:max_requests] || 0 %>

## PassengerStatThrottleRate
#
# By default, Phusion Passenger performs several filesystem checks (or, in
# programmers jargon, stat() calls) each time a request is processed:
#
# It checks whether config/environment.rb, config.ru or passenger_wsgi.py is
# present, in order to autodetect Rails, Rack and WSGI applications.
#
# It checks whether restart.txt has changed or whether always_restart.txt
# exists, in order to determine whether the application should be restarted.
#
# On some systems where disk I/O is expensive, e.g. systems where the harddisk
# is already being heavily loaded, or systems where applications are stored on
# NFS shares, these filesystem checks can incur a lot of overhead.
#
# You can decrease or almost entirely eliminate this overhead by setting
# PassengerStatThrottleRate. Setting this option to a value of x means that the
# above list of filesystem checks will be performed at most once every x
# seconds. Setting it to a value of 0 means that no throttling will take place,
# or in other words, that the above list of filesystem checks will be performed
# on every request.

PassengerStatThrottleRate <%= configuration[:passenger][:stat_throttle_rate] || 0 %>

##  PassengerBufferResponse
#
# When turned on, application-generated responses are buffered in memory. By
# buffering responses, protection is provided against slow HTTP clients that
# can not read your response immediately.
#
# For example, consider an HTTP client that's on a dial-up modem link, and
# your application instance generates a 2 MB response. If response buffering
# is turned off then your application instance will be blocked until the entire
# 2 MB has been sent out to the HTTP client. This disallows your application
# instance to do any useful work in the mean time. By enabling response buffering,
# Phusion Passenger will read the application response as quickly as possible and will take care of slow clients.
#
# However, keep in mind that enabling this option will make streaming responses impossible.
#
# When response buffering is turned on, Phusion Passenger will wait until the
# application is done sending the entire response before forwarding it to the client.
# The client will not receive anything for 10 seconds, after which it receives the
# entire response at once. When response buffering is turned off, it works as
# expected: the client receives an "entry X" message every second for 10 seconds.
#
# The PassengerBufferResponse directive should be turned off if responses can be huge.
# Because entire responses are buffered in memory when turned on.
<% if supports_passenger_buffer_response? %>
PassengerBufferResponse <%= passenger_config_boolean(configuration[:passenger][:buffer_response], true)%>
<% end %>

## PassengerFriendlyErrorPages
# Phusion Passenger can display friendly error pages whenever an application fails to start. 
# This friendly error page presents the startup error message, some suggestions for solving the problem, and a backtrace. 
# This feature is very useful during application development and useful for less experienced system administrators, 
# but the page might reveal potentially sensitive information, depending on the application. 
# Experienced system administrators who are using Phusion Passenger on serious production servers should consider turning this feature off.

PassengerFriendlyErrorPages <%= passenger_config_boolean(configuration[:passenger][:friendly_error_pages], false) %>

<% if configuration[:passenger][:enterprise] %>

## PassengerMaxRequestTime
# The maximum amount of time, in seconds, that an application process may take to process a request. 
# If the request takes longer than this amount of time, then the application process will be forcefully shut down, and possibly restarted upon the next request. 
# A value of 0 means that there is no time limit.

PassengerMaxRequestTime <%= configuration[:passenger][:max_request_time] || '0' %>

## PassengerMemoryLimit
# The maximum amount of memory that an application process may use, in megabytes. 
# Once an application process has surpassed its memory limit, it will process all the requests currently present in its queue and then shut down. 
# A value of 0 means that there is no maximum: the application’s memory usage will not be checked.

PassengerMemoryLimit <%= configuration[:passenger][:memory_limit] || '0' %>

## 

## PassengerRollingRestarts
#
# Enables or disables support for rolling restarts. Normally when you restart an application (by touching restart.txt), Phusion Passenger would shut down all application processes and spawn a new one. The spawning of a new application process could take a while, and any requests that come in during this time will be blocked until this first application process has spawned.

PassengerRollingRestarts <%= passenger_config_boolean(configuration[:passenger][:rolling_restarts], false) %>

## PassengerResistDeploymentErrors

PassengerResistDeploymentErrors <%= passenger_config_boolean(configuration[:passenger][:resist_deployment_errors], false) %>

<% if configuration[:passenger][:debug_log_file] %>
## PassengerDebugLogFile
# By default, passenger debug and error messages go to the webserver log file.  
# If you want them to go somewhere else, this is the place.

PassengerDebugLogFile <%= configuration[:passenger][:debug_log_file] %>
<% end %>

<% end %>
